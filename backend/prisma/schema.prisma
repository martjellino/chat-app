generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                 String         @id @default(cuid())
  name               String
  email              String         @unique
  password           String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  avatar             String?
  status             String         @default("OFFLINE") // Instead of UserStatus enum
  
  // Relations
  sessions           Session[]
  sentMessages       Message[]      @relation("SentMessages")
  conversations      Participant[]
  initiatedChats     Conversation[] @relation("ChatInitiator")
  contacts           Contact[]      @relation("UserContacts")
  contactOf          Contact[]      @relation("ContactOf")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Conversation {
  id          String        @id @default(cuid())
  type        String        @default("DIRECT") // Instead of ChatType enum
  name        String?       // For group chats
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  creator     User          @relation("ChatInitiator", fields: [createdBy], references: [id])
  
  // Relations
  participants Participant[]
  messages     Message[]
}

model Participant {
  id             String       @id @default(cuid())
  userId         String
  conversationId String
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  role           String       @default("MEMBER") // Instead of ParticipantRole enum
  
  // Relations
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Message {
  id             String       @id @default(cuid())
  content        String
  senderId       String
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isEdited       Boolean      @default(false)
  isDeleted      Boolean      @default(false)
  
  // Relations
  sender        User         @relation("SentMessages", fields: [senderId], references: [id])
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readBy        MessageRead[]
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model Contact {
  id        String   @id @default(cuid())
  userId    String
  contactId String
  status    String   @default("PENDING") // Instead of ContactStatus enum
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User     @relation("UserContacts", fields: [userId], references: [id], onDelete: Cascade)
  contact  User     @relation("ContactOf", fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([userId, contactId])
}

model Note {
  id      Int     @id @default(autoincrement())
  content String
  isDone  Boolean @default(false)
}